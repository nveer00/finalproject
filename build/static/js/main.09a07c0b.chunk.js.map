{"version":3,"sources":["components/RecipeIngredientDetails.js","components/FoodRecipeCard.js","components/StatusMessagePanel.js","App.js","index.js"],"names":["RecipeIngredientDetails","ingredients","toggleCompleted","content","map","ingredient","index","key","className","text","quantity","measure","weight","id","onClick","FoodRecipeCard","foodrecipe","useState","displayIngredients","setDisplayIngredients","recipe","label","image","url","src","alt","href","target","StatusMessagePanel","status","position","App","searchquery","setSearchQuery","foodrecipes","setFoodRecipes","setStatus","edamam_api_url","getData","Axios","get","result","data","more","hits","onSubmit","e","preventDefault","type","name","onChange","value","autoComplete","placeholder","ReactDOM","render","document","getElementById"],"mappings":";sQAoCeA,EAjCiB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAYC,EAAsB,EAAtBA,gBAEzCC,EAAUF,EAAYG,KAAI,SAACC,EAAWC,GACxC,OACI,wBAAIC,IAAKD,EAAOE,UAAU,oBACxB,wBAAIA,UAAU,qBAAqBH,EAAWI,MAC9C,wBAAID,UAAU,qBAAqBH,EAAWK,SAA9C,IAAyDL,EAAWM,SACpE,wBAAIH,UAAU,qBAAd,YAA4CH,EAAWO,YAK/D,OAAO,yBAAKC,GAAG,UAAUL,UAAU,SACzB,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAASM,QAAS,kBAAIZ,MAAtC,QACA,0BAAMM,UAAU,sBAAhB,gBACKL,KCUJY,EAzBQ,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACxB,EAAoDC,oBAAS,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAA2CH,EAAWI,OAA9CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,IAAKtB,EAA3B,EAA2BA,YAM3B,OACE,yBAAKO,UAAU,cACb,4BAAKa,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,6BACA,4BAAQP,QAAS,kBAAMK,GAAuBD,KAA9C,eACCA,GAAsB,kBAAC,EAAD,CAAyBjB,YAAaA,EAAaC,gBAVtD,WACrBiB,GAAuBD,MAUtB,6BACA,uBAAGQ,KAAMH,EAAKI,OAAO,SAAS,kDCLrBC,EAZY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5B,OACG,yBAAKrB,UAAU,gBAAgBsB,SAAS,YACnC,0BAAMtB,UAAU,cAAcqB,K,yyMCyDzBE,MAzDf,WACE,MAAsCd,mBAAS,IAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KACA,EAAsChB,mBAAS,IAA/C,mBAAOiB,EAAP,KAAoBC,EAApB,KACA,EAA4BlB,mBAAS,IAArC,mBAAOY,EAAP,KAAeO,EAAf,KAKMC,EAAc,0CAAsCL,EAAtC,mBAHN,WAGM,oBAFL,oCAITM,EAAO,uCAAG,uFACM,KAAhBN,EADU,iCAESO,IAAMC,IAAIH,GAFnB,WAENI,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAU,mDAJP,OAOZA,EAAU,IACVH,EAAe,IACfE,EAAeM,EAAOC,KAAKE,MATf,wBAaZR,EAAU,gDAbE,4CAAH,qDAwBb,OACE,yBAAK5B,UAAU,gBACb,mDACA,0BAAMqC,SARO,SAAAC,GACfA,EAAEC,iBACFT,KAM4B9B,UAAU,gBACtB,KAAXqB,GAAiB,kBAAC,EAAD,CAAoBA,OAAQA,IAC9C,2BACEmB,KAAK,OACLC,KAAK,cACLC,SAfS,SAAAJ,GAAC,OAAIb,EAAea,EAAEnB,OAAOwB,QAgBtCA,MAAOnB,EACPoB,aAAa,MACbC,YAAY,mBAEd,2BAAOL,KAAK,SAASG,MAAM,oBAE7B,yBAAK3C,UAAU,eACZ0B,IAAgB,IACfA,EAAY9B,KAAI,SAACY,EAAWV,GAAZ,OAAsB,kBAAC,EAAD,CAAgBC,IAAKD,EAAOU,WAAYA,UCrDxFsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.09a07c0b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types'; \n\nconst RecipeIngredientDetails = ({ ingredients,toggleCompleted }) => {\n\n  var content = ingredients.map((ingredient,index) => {\n    return (\n        <ul key={index} className=\"ingredients-list\">\n          <li className=\"ingredients-label\">{ingredient.text}</li>\n          <li className=\"ingredients-label\">{ingredient.quantity}-{ingredient.measure}</li>\n          <li className=\"ingredients-label\">Weight - {ingredient.weight}</li>\n        </ul>\n    )\n  });\n\n  return <div id=\"myModal\" className=\"modal\">\n            <div className=\"modal-content\">\n              <span className=\"close\"  onClick={()=>toggleCompleted()}>&times;</span>\n              <span className=\"ingredients-labelh\">Ingredients:</span>\n                  {content}\n            </div>\n          </div>\n}\n\nRecipeIngredientDetails.propTypes = {\n  toggleCompleted: PropTypes.func.isRequired,\n  ingredients: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string,\n      quantity: PropTypes.number,\n      measure: PropTypes.number,\n      weight: PropTypes.number\n    })\n  )\n};\n\nexport default RecipeIngredientDetails;","import React, { useState } from \"react\";\nimport RecipeIngredientDetails from \"./RecipeIngredientDetails\";\nimport PropTypes from 'prop-types'; \n\nconst FoodRecipeCard = ({ foodrecipe }) => {\n  const [displayIngredients, setDisplayIngredients] = useState(false);\n  const { label, image, url, ingredients } = foodrecipe.recipe;\n\n  const toggleCompleted = () => {\n     setDisplayIngredients(!displayIngredients);\n  }\n\n  return (\n    <div className=\"recipeCard\">\n      <h2>{label}</h2>\n      <img src={image} alt={label} />\n      <br></br>\n      <button onClick={() => setDisplayIngredients(!displayIngredients)}>Ingredients</button>\n      {displayIngredients && <RecipeIngredientDetails ingredients={ingredients} toggleCompleted = {toggleCompleted}/>}\n      <br></br>\n      <a href={url} target=\"blank\" ><button>Preparation</button></a>\n    </div>\n  );\n};\n\nFoodRecipeCard.propTypes = {\n  foodrecipe: PropTypes.object.isRequired\n};\n\nexport default FoodRecipeCard;\n","import React from \"react\";\nimport PropTypes from 'prop-types'; \n\nconst StatusMessagePanel = ({ status }) => {\n  return (\n     <div className=\"error-message\" position=\"absolute\">\n          <span className=\"error-text\">{status}</span>\n     </div>\n  );\n};\n\nStatusMessagePanel.propTypes = {\n  status: PropTypes.string\n};\n\nexport default StatusMessagePanel;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport FoodRecipeCard from \"./components/FoodRecipeCard\";\nimport StatusMessagePanel from \"./components/StatusMessagePanel\";\n\nfunction App() {\n  const [searchquery, setSearchQuery] = useState(\"\");\n  const [foodrecipes, setFoodRecipes] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  const appId = \"6efad36b\";\n  const appKey = \"a2cf52d19b1a0beeb1bd9d1c4bfda4d1\";\n\n  const edamam_api_url = `https://api.edamam.com/search?q=${searchquery}&app_id=${appId}&app_key=${appKey}`;\n\n  const getData = async () => {\n    if (searchquery !== \"\") {\n      const result = await Axios.get(edamam_api_url);\n      if (!result.data.more) {\n        return setStatus(\"No recipes found for specified search criteria\");\n      }\n\n      setStatus(\"\");\n      setSearchQuery(\"\");\n      setFoodRecipes(result.data.hits);\n   \n\n    } else {\n      setStatus(\"Please specify search criteria such as Pasta\");\n    }\n  };\n\n  const onChange = e => setSearchQuery(e.target.value);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    getData();\n  };\n\n  return (\n    <div className=\"AppContainer\">\n      <h1>Food Recipe Search </h1>\n      <form onSubmit={onSubmit} className=\"search-panel\">\n        {status !== \"\" && <StatusMessagePanel status={status} />}\n        <input\n          type=\"text\"\n          name=\"searchquery\"\n          onChange={onChange}\n          value={searchquery}\n          autoComplete=\"off\"\n          placeholder=\"Search Recipes\"\n        />\n        <input type=\"submit\" value=\"Search Recipes\" />\n      </form>\n      <div className=\"recipesDeck\">\n        {foodrecipes !== [] &&\n          foodrecipes.map((foodrecipe,index) => <FoodRecipeCard key={index} foodrecipe={foodrecipe} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}